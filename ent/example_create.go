// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-fiber-ent-web-layout/ent/example"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExampleCreate is the builder for creating a Example entity.
type ExampleCreate struct {
	config
	mutation *ExampleMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *ExampleCreate) SetName(s string) *ExampleCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetSummary sets the "summary" field.
func (ec *ExampleCreate) SetSummary(s string) *ExampleCreate {
	ec.mutation.SetSummary(s)
	return ec
}

// SetPrice sets the "price" field.
func (ec *ExampleCreate) SetPrice(f float64) *ExampleCreate {
	ec.mutation.SetPrice(f)
	return ec
}

// SetCreateTime sets the "create_time" field.
func (ec *ExampleCreate) SetCreateTime(t time.Time) *ExampleCreate {
	ec.mutation.SetCreateTime(t)
	return ec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ec *ExampleCreate) SetNillableCreateTime(t *time.Time) *ExampleCreate {
	if t != nil {
		ec.SetCreateTime(*t)
	}
	return ec
}

// SetUpdateTime sets the "update_time" field.
func (ec *ExampleCreate) SetUpdateTime(t time.Time) *ExampleCreate {
	ec.mutation.SetUpdateTime(t)
	return ec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ec *ExampleCreate) SetNillableUpdateTime(t *time.Time) *ExampleCreate {
	if t != nil {
		ec.SetUpdateTime(*t)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExampleCreate) SetID(i int) *ExampleCreate {
	ec.mutation.SetID(i)
	return ec
}

// Mutation returns the ExampleMutation object of the builder.
func (ec *ExampleCreate) Mutation() *ExampleMutation {
	return ec.mutation
}

// Save creates the Example in the database.
func (ec *ExampleCreate) Save(ctx context.Context) (*Example, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExampleCreate) SaveX(ctx context.Context) *Example {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExampleCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExampleCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExampleCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Example.name"`)}
	}
	if v, ok := ec.mutation.Name(); ok {
		if err := example.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Example.name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Summary(); !ok {
		return &ValidationError{Name: "summary", err: errors.New(`ent: missing required field "Example.summary"`)}
	}
	if _, ok := ec.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Example.price"`)}
	}
	if v, ok := ec.mutation.Price(); ok {
		if err := example.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Example.price": %w`, err)}
		}
	}
	if v, ok := ec.mutation.ID(); ok {
		if err := example.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Example.id": %w`, err)}
		}
	}
	return nil
}

func (ec *ExampleCreate) sqlSave(ctx context.Context) (*Example, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExampleCreate) createSpec() (*Example, *sqlgraph.CreateSpec) {
	var (
		_node = &Example{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(example.Table, sqlgraph.NewFieldSpec(example.FieldID, field.TypeInt))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(example.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Summary(); ok {
		_spec.SetField(example.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := ec.mutation.Price(); ok {
		_spec.SetField(example.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := ec.mutation.CreateTime(); ok {
		_spec.SetField(example.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := ec.mutation.UpdateTime(); ok {
		_spec.SetField(example.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	return _node, _spec
}

// ExampleCreateBulk is the builder for creating many Example entities in bulk.
type ExampleCreateBulk struct {
	config
	err      error
	builders []*ExampleCreate
}

// Save creates the Example entities in the database.
func (ecb *ExampleCreateBulk) Save(ctx context.Context) ([]*Example, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Example, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExampleCreateBulk) SaveX(ctx context.Context) []*Example {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExampleCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExampleCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
