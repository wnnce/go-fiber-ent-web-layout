// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gofiber/fiber/v2"
	"go-fiber-ent-web-layout/api/example/v1"
	"go-fiber-ent-web-layout/api/user/v1"
	"go-fiber-ent-web-layout/internal/cache"
	"go-fiber-ent-web-layout/internal/common"
	"go-fiber-ent-web-layout/internal/conf"
	"go-fiber-ent-web-layout/internal/data"
	"go-fiber-ent-web-layout/internal/middleware"
	"go-fiber-ent-web-layout/internal/service"
)

// Injectors from wire.go:

// wireApp generate inject code
func wireApp(confData *conf.Data, jwt *conf.Jwt) (*fiber.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData)
	if err != nil {
		return nil, nil, err
	}
	iExampleRepo := data.NewExampleRepo(dataData)
	iExampleService := service.NewExampleService(iExampleRepo)
	exampleApi := example.NewExampleApi(iExampleService)
	jwtService := common.NewJwtService(jwt)
	loginUserCache := cache.NewLoginUserCache()
	iUserService := service.NewUserService(jwtService, loginUserCache)
	userApi := user.NewUserApi(iUserService)
	authMiddleware := middleware.NewAuthMiddleware(jwtService, loginUserCache)
	app := newApp(exampleApi, userApi, authMiddleware)
	return app, func() {
		cleanup()
	}, nil
}
